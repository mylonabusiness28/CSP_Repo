-- The dining philosophers with deadlock.

channel pickup:{0..n}.{0..n} 
channel putdown:{0..n}.{0..n} 
channel sitdown:{0..n} 
channel getup:{0..n}

-- Largest philosopher index:

n = 10

-- Define addition and subtraction mod n+1

inc(x) = (x + 1) % (n+1)
dec(x) = (x - 1) % (n+1)

-- The definitions of the philosophers and the forks are just as in
-- the notes.

PHIL(i) =  sitdown.i -> pickup.i.inc(i) -> pickup.i.i ->
           putdown.i.inc(i) -> putdown.i.i -> getup.i -> PHIL(i)

FORK(i) = pickup.i.i -> putdown.i.i -> FORK(i)
        [] pickup.dec(i).i -> putdown.dec(i).i -> FORK(i)

-- Notice the use of indexed parallel here.

A_PHIL(i) = { pickup.i.i, pickup.i.inc(i),
                         putdown.i.i, putdown.i.inc(i),
                         sitdown.i, getup.i }

PHILS = || i:{0..n} @ [A_PHIL(i)] PHIL(i)

A_FORKS(i) = { pickup.i.i, putdown.i.i,
                         pickup.dec(i).i, putdown.dec(i).i }

FORKS = || i:{0..n} @ [A_FORKS(i)] FORK(i)

COLLEGE = PHILS [ {| pickup,putdown,sitdown,getup |} || {| pickup,putdown |} ] FORKS

assert COLLEGE:[deadlock free]

NEWCOLLEGE = COLLEGE [ {|pickup,putdown,sitdown,getup|} ||
                       {|sitdown,getup|} ] BUTLER(0)

BUTLER(i) = if (i==0)
            then [] x : {|sitdown|} @ x -> BUTLER(1)
            else
              if (i==n)
              then [] y : {|getup|} @ y -> BUTLER(i-1)
              else (([] y : {|getup|} @ y -> BUTLER(i-1))
                      [] ( [] x : {|sitdown|} @ x -> BUTLER(i+1)))

assert NEWCOLLEGE:[deadlock free]                      
