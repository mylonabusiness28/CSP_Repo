include "sequence_aux.csp" 
include "function_aux.csp" 
include "auxiliar_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_REF.csp" 
include "rules.csp" 


datatype EVENTS = picksup | putsdown | picksack | putsack | thinks | sits | eats | getsup
RANGE = {1..2}
channel fk : RANGE.RANGE.EVENTS
channel fk1 : EVENTS
channel fk2 : EVENTS
channel pfk : RANGE.RANGE.EVENTS
channel pfk1 : EVENTS
channel pfk2 : EVENTS


FK0 = fk1.picksup -> fk1.picksack -> fk1.putsdown -> fk1.putsack -> FK0
			[] fk2.picksup -> fk2.picksack -> fk2.putsdown -> fk2.putsack -> FK0
FK1_INTER_FK2 = FK1|||FK2



FK1 = FK0 [[fk1 <- fk.1.1,fk2 <- fk.1.2]] 

FK2 = FK0 [[fk1 <- fk.2.2,fk2 <- fk.2.1]] 

PH0 = pfk1.picksup -> pfk1.picksack -> pfk2.picksup -> pfk2.picksack -> pfk1.putsdown -> pfk1.putsack -> pfk2.putsdown -> pfk2.putsack  -> PH0
PH1_INTER_PH2 = PH1|||PH2



PH1 = PH0 [[pfk1 <- pfk.1.2,pfk2 <- pfk.1.1]] 

PH2 = PH0 [[pfk1 <- pfk.2.1,pfk2 <- pfk.2.2]] 
 
FK1_INTER_FK2_COMM_PH1_INTER_PH2 = (FK1_INTER_FK2|||PH1_INTER_PH2) [| {|fk.1.1,pfk.1.1 |} |] BFIO_FK1_INTER_FK2_COMM_PH1_INTER_PH2(fk.1.1,pfk.1.1)


FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED  = FK1_INTER_FK2_COMM_PH1_INTER_PH2[| {| fk.1.2,pfk.2.2 |} |] BFIO_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED(fk.1.2,pfk.2.2)


FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED  = FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED[| {| fk.2.2,pfk.2.1 |} |] BFIO_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(fk.2.2,pfk.2.1)




inputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED =  {| fk.1.1.picksup, fk.1.1.putsdown, fk.1.2.picksup, fk.1.2, fk.2.2.picksup, fk.2.2.putsdown, fk.2.1.picksup, fk.2.1, pfk.1.2.putsack, pfk.1.2.picksack, pfk.1.1.picksack, pfk.1.1.putsack, pfk.2.1.putsack, pfk.2.1.picksack, pfk.2.2.picksack, pfk.2.2.putsack |} 

inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1 = inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(fk.2.1)
inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2 = inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(pfk.1.2)
inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 = inputs_R_IO_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1(fk.2.1, pfk.1.2)
inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 = inputs_R_IO_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2(pfk.1.2, fk.2.1)
inputs_DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 = outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2
inputs_DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 = outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1


outputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED =  {| fk.1.1.picksack, fk.1.1.putsack, fk.1.2.picksack, fk.1.2.putsack, fk.2.2.picksack, fk.2.2.putsack, fk.2.1.picksack, fk.2.1.putsack, pfk.1.2.picksup, pfk.1.2.putsdown, pfk.1.1.picksup, pfk.1.1.putsdown, pfk.2.1.picksup, pfk.2.1.putsdown, pfk.2.2.picksup, pfk.2.2.putsdown |} 
 
outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1 = outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(fk.2.1)
outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2 = outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(pfk.1.2)
outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 = outputs_R_IO_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(fk.2.1, pfk.1.2)
outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 = outputs_R_IO_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(pfk.1.2, fk.2.1)
outputs_DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 = inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2
outputs_DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 = inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1

--Protocols 

PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1 = PROT_FK(fk.2.1)
PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2 = PROT_PH(pfk.1.2)
DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1 = DUAL_PROT_FK(fk.2.1)
DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2 = DUAL_PROT_PH(pfk.1.2)
PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 = PROT_IMP_R_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1
PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 = PROT_IMP_R_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2
DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 = DUAL_PROT_IMP_R_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1
DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 = DUAL_PROT_IMP_R_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2

--Auxiliar Processes

PROT_PH(ch) = ch.picksup -> ch.picksack -> ch.putsdown -> ch.putsack -> PROT_PH(ch)

DUAL_PROT_PH(ch) = ch.picksup -> ch.picksack -> ch.putsdown -> ch.putsack -> DUAL_PROT_PH(ch)

PROT_FK(ch) = ch.picksup -> ch.picksack -> ch.putsdown -> ch.putsack -> PROT_FK(ch)

DUAL_PROT_FK(ch) = ch.picksup -> ch.picksack -> ch.putsdown -> ch.putsack -> DUAL_PROT_FK(ch)

--Reflexive COMPOSITION 
FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_REF = FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED[| {| fk.2.1,pfk.1.2 |} |] BFIO_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_REF(fk.2.1,pfk.1.2)

--ASSERTIONS

--D.1 channel1 is in the alphabet of contract

assert not FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED \ {|fk.2.1|} [T= FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED



--D.1 channel1 is in the alphabet of contract

assert not FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED \ {|pfk.1.2|} [T= FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED

---- D.6: Protocols are Strong Compatible
assert PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 :[deadlock free [FD]]
assert PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 :[deadlock free [FD]]

assert not Test(inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 == outputs_DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2) [T= ERROR

assert not Test(outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 == inputs_DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2) [T= ERROR

assert not Test(inputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 == outputs_DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1) [T= ERROR

assert not Test(outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 == inputs_DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1) [T= ERROR



assert DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 [T= PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2

assert PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 [T= DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2



assert DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 [F= PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1

assert DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 [T= PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1

assert PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 [T= DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1



assert DUAL_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 [F= PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2

--D.7: Protocols have Finite Output Property 

--D.7.1

assert PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2 \  outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_fk_2_1_R_IO_pfk_1_2:[divergence free [FD]]

assert PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1 \  outputs_PROT_IMP_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_pfk_1_2_R_IO_fk_2_1:[divergence free [FD]]



FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_LR1 = <(pfk.1.2.e,fk.2.1.e) | e <- seq(extensions(fk.2.1)),
		 member(fk.2.1.e,outputsCC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(fk.2.1)),
		 member(pfk.1.2.e,inputsCC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(pfk.1.2))>

FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_LR2 = <(fk.2.1.e,pfk.1.2.e) | e <- seq(extensions(pfk.1.2)),
		 member(pfk.1.2.e,outputsCC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(pfk.1.2)),
		 member(fk.2.1.e,inputsCC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(fk.2.1))>

assert PROJECTION_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED({fk.2.1, pfk.1.2}) [| {| fk.2.1, pfk.1.2 |} |] COPY(<(fk.2.1.e,pfk.1.2.e) | e <- seq(extensions(pfk.1.2)),
		 member(pfk.1.2.e,outputsCC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(pfk.1.2)),
		 member(fk.2.1.e,inputsCC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(fk.2.1))>) ||| COPY (<(fk.2.1.e,pfk.1.2.e) | e <- seq(extensions(pfk.1.2)),
		 member(pfk.1.2.e,outputsCC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(pfk.1.2)),
		 member(fk.2.1.e,inputsCC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(fk.2.1))>) :[deadlock free [F]]--Buffer 

BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(ci,co, n) =
  let
    B(<>) = [] x : outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(ci) @ ci.x -> B(<x>)
    B(s)  =    (co!head(s) -> B(tail(s)))
              [] (#s<n & [] x : outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(ci) @ ci.x -> B(s^<x>))
  within B(<>)
outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(c) = { x | x <- extensions(c), member(c.x, outputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED)}

BFIO_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED_REF(c1,c2) = BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(c1, c2,1) ||| BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(c2,c1,1)  

  

inputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED =  {| fk.1.1.picksup, fk.1.1.putsdown, fk.1.2.picksup, fk.1.2, fk.2.2.picksup, fk.2.2.putsdown, fk.2.1.picksup, fk.2.1, pfk.1.2.putsack, pfk.1.2.picksack, pfk.1.1.picksack, pfk.1.1.putsack, pfk.2.1.putsack, pfk.2.1.picksack, pfk.2.2.picksack, pfk.2.2.putsack |} 


outputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED =  {| fk.1.1.picksack, fk.1.1.putsack, fk.1.2.picksack, fk.1.2.putsack, fk.2.2.picksack, fk.2.2.putsack, fk.2.1.picksack, fk.2.1.putsack, pfk.1.2.picksup, pfk.1.2.putsdown, pfk.1.1.picksup, pfk.1.1.putsdown, pfk.2.1.picksup, pfk.2.1.putsdown, pfk.2.2.picksup, pfk.2.2.putsdown |} 
 
--Buffer 

BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED(ci,co, n) =
  let
    B(<>) = [] x : outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED(ci) @ ci.x -> B(<x>)
    B(s)  =    (co!head(s) -> B(tail(s)))
              [] (#s<n & [] x : outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED(ci) @ ci.x -> B(s^<x>))
  within B(<>)
outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED(c) = { x | x <- extensions(c), member(c.x, outputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED)}

BFIO_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED_FEED(c1,c2) = BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED(c1, c2,1) ||| BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED(c2,c1,1)


inputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2 =  {| fk.1.1.picksup, fk.1.1.putsdown, fk.1.2.picksup, fk.1.2, fk.2.2.picksup, fk.2.2.putsdown, fk.2.1.picksup, fk.2.1, pfk.1.2.putsack, pfk.1.2.picksack, pfk.1.1.picksack, pfk.1.1.putsack, pfk.2.1.putsack, pfk.2.1.picksack, pfk.2.2.picksack, pfk.2.2.putsack |} 


outputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2 =  {| fk.1.1.picksack, fk.1.1.putsack, fk.1.2.picksack, fk.1.2.putsack, fk.2.2.picksack, fk.2.2.putsack, fk.2.1.picksack, fk.2.1.putsack, pfk.1.2.picksup, pfk.1.2.putsdown, pfk.1.1.picksup, pfk.1.1.putsdown, pfk.2.1.picksup, pfk.2.1.putsdown, pfk.2.2.picksup, pfk.2.2.putsdown |} 
 
--Buffer 

BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2(ci,co, n) =
  let
    B(<>) = [] x : outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2(ci) @ ci.x -> B(<x>)
    B(s)  =    (co!head(s) -> B(tail(s)))
              [] (#s<n & [] x : outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2(ci) @ ci.x -> B(s^<x>))
  within B(<>)
outputsC_FK1_INTER_FK2_COMM_PH1_INTER_PH2(c) = { x | x <- extensions(c), member(c.x, outputs_FK1_INTER_FK2_COMM_PH1_INTER_PH2)}

BFIO_FK1_INTER_FK2_COMM_PH1_INTER_PH2_FEED(c1,c2) = BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2(c1, c2,1) ||| BUFFER_FK1_INTER_FK2_COMM_PH1_INTER_PH2(c2,c1,1)


inputs_FK1_INTER_FK2 =  {| fk.1.1.picksup, fk.1.1.putsdown, fk.1.2.picksup, fk.1.2, fk.2.2.picksup, fk.2.2.putsdown, fk.2.1.picksup, fk.2.1 |} 



inputs_PH1_INTER_PH2 =  {| pfk.1.2.putsack, pfk.1.2.picksack, pfk.1.1.picksack, pfk.1.1.putsack, pfk.2.1.putsack, pfk.2.1.picksack, pfk.2.2.picksack, pfk.2.2.putsack |} 


outputs_FK1_INTER_FK2 =  {| fk.1.1.picksack, fk.1.1.putsack, fk.1.2.picksack, fk.1.2.putsack, fk.2.2.picksack, fk.2.2.putsack, fk.2.1.picksack, fk.2.1.putsack |} 
 

outputs_PH1_INTER_PH2 =  {| pfk.1.2.picksup, pfk.1.2.putsdown, pfk.1.1.picksup, pfk.1.1.putsdown, pfk.2.1.picksup, pfk.2.1.putsdown, pfk.2.2.picksup, pfk.2.2.putsdown |} 
 
--Buffer 

BUFFER_FK1_INTER_FK2(ci,co, n) =
  let
    B(<>) = [] x : outputsC_FK1_INTER_FK2(ci) @ ci.x -> B(<x>)
    B(s)  =    (co!head(s) -> B(tail(s)))
              [] (#s<n & [] x : outputsC_FK1_INTER_FK2(ci) @ ci.x -> B(s^<x>))
  within B(<>)
BUFFER_PH1_INTER_PH2(ci,co, n) =
  let
    B(<>) = [] x : outputsC_PH1_INTER_PH2(ci) @ ci.x -> B(<x>)
    B(s)  =    (co!head(s) -> B(tail(s)))
              [] (#s<n & [] x : outputsC_PH1_INTER_PH2(ci) @ ci.x -> B(s^<x>))
  within B(<>)
  
outputsC_FK1_INTER_FK2(c) = { x | x <- extensions(c), member(c.x, outputs_FK1_INTER_FK2)}
outputsC_PH1_INTER_PH2(c) = { x | x <- extensions(c), member(c.x, outputs_PH1_INTER_PH2)}

BFIO_FK1_INTER_FK2_COMM_PH1_INTER_PH2(c1,c2) = BUFFER_FK1_INTER_FK2(c1, c2,1) ||| BUFFER_PH1_INTER_PH2(c2,c1,1)  

  


inputs_FK1 =  {| fk.1.1.picksup, fk.1.1.putsdown, fk.1.2.picksup, fk.1.2 |} 



inputs_FK2 =  {| fk.2.2.picksup, fk.2.2.putsdown, fk.2.1.picksup, fk.2.1 |} 


outputs_FK1 =  {| fk.1.1.picksack, fk.1.1.putsack, fk.1.2.picksack, fk.1.2.putsack |} 
 

outputs_FK2 =  {| fk.2.2.picksack, fk.2.2.putsack, fk.2.1.picksack, fk.2.1.putsack |} 
 



inputs_PH1 =  {| pfk.1.2.putsack, pfk.1.2.picksack, pfk.1.1.picksack, pfk.1.1.putsack |} 



inputs_PH2 =  {| pfk.2.1.putsack, pfk.2.1.picksack, pfk.2.2.picksack, pfk.2.2.putsack |} 


outputs_PH1 =  {| pfk.1.2.picksup, pfk.1.2.putsdown, pfk.1.1.picksup, pfk.1.1.putsdown |} 
 

outputs_PH2 =  {| pfk.2.1.picksup, pfk.2.1.putsdown, pfk.2.2.picksup, pfk.2.2.putsdown |} 
 

