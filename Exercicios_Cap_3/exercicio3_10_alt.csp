channel pick,put:{0..n}.{0..n} 
channel enter,eat,leave:{0..n}

n = 4

PHIL(i) =  enter.i -> ((pick.i.i -> pick.i.((i+1) % (n+1)) -> eat.i 
                        -> put.i.i -> put.i.((i+1) % (n+1)) -> leave.i -> PHIL(i))) 
                     -- []
                    -- ((pick.i.((i+1) % (n+1)) -> pick.i.i -> eat.i 
                    --   -> put.i.((i+1) % (n+1)) -> put.i.i -> leave.i -> PHIL(i))) 

--ALPHA_PHIL(i) = {pick.i.i, pick.i.((i+1) % (n+1)), put.i.i, put.i.((i+1) % (n+1)), enter.i, eat.i, leave.i}

PHILOSOPHER = ||| i:{0..n} @ PHIL(i)

CHOP(i) = pick.i.i -> put.i.i -> CHOP(i)
          [] pick.((i-1) % (n+1)).i -> put.((i-1) % (n+1)).i -> CHOP(i) 

--ALPHA_CHOP(i) = {pick.i.i, put.i.i, pick.((i-1) % (n+1)).i, put.((i-1) % (n+1)).i}

CHOPSTICK = ||| i:{0..n} @ CHOP(i)

COLLEGE = PHILOSOPHER [{|pick,put,enter,eat,leave|} || {|pick,put|}] CHOPSTICK

assert COLLEGE:[deadlock free] 
                                 
BUTLER(i) = if (i==0)
            then [] x: {|enter|} @ x -> BUTLER(1)
            else
               if (i==n)                               
               then [] y: {|leave|} @ y -> BUTLER(i-1)
               else (([] y : {|leave|} @ y -> BUTLER(i-1))
                        [] ( [] x : {|enter|} @ x -> BUTLER(i+1)))

NEWCOLLEGE = COLLEGE [{|pick,put,enter,eat,leave|} || {|enter,leave|}] BUTLER(0)

assert NEWCOLLEGE:[deadlock free]