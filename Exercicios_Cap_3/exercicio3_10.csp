channel pick,put:{0..n}.{0..n} 
channel enter,eat,leave:{0..n}

n =4

inc(x) = (x + 1) % (n+1) -- Como assim? 
dec(x) = (x - 1) % (n+1)  -- sem essa função de calculo não funciona

PHIL(i) =  enter.i -> ((pick.i.i -> pick.i.inc(i) -> eat.i 
                        -> put.i.i -> put.i.inc(i) -> leave.i -> PHIL(i))) 
                     --   []
                     -- ((pick.i.((i+1)%n+1) -> pick.i.i -> eat.i 
                     --   -> put.i.((i+1)%n+1) -> put.i.i -> leave.i -> PHIL(i))) 

ALPHA_PHIL(i) = {pick.i.i, pick.i.inc(i), put.i.i, put.i.inc(i), enter.i, eat.i, leave.i} -- alfabeto do filosofo

PHILOSOPHER = || i:{0..n} @ [ALPHA_PHIL(i)] PHIL(i)

CHOP(i) = pick.i.i -> put.i.i -> CHOP(i)
          [] pick.dec(i).i -> put.dec(i).i -> CHOP(i) 

ALPHA_CHOP(i) = {pick.i.i, put.i.i, pick.dec(i).i, put.dec(i).i} -- alfabeto do palito

CHOPSTICK = || i:{0..n} @ [ALPHA_CHOP(i)] CHOP(i)

COLLEGE = PHILOSOPHER [{|pick,put,enter,eat,leave|} || {|pick,put|}] CHOPSTICK

assert COLLEGE:[deadlock free] 
                                 
BUTLER(i) = if (i==0)
            then [] x: {|enter|} @ x -> BUTLER(1)
            else
               if (i==n)                                -- fiz essa função seguindo a aula do SIGAA
               then [] y: {|leave|} @ y -> BUTLER(i-1)
               else (([] y : {|leave|} @ y -> BUTLER(i-1))
                        [] ( [] x : {|enter|} @ x -> BUTLER(i+1)))

NEWCOLLEGE = COLLEGE [{|pick,put,enter,eat,leave|} || {|enter,leave|}] BUTLER(0)

assert NEWCOLLEGE:[deadlock free]
