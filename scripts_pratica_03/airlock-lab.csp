-- Tipos de dados

datatype LOCAL = interna | externa

datatype ACAO = abrir | fechar

channel porta, valvula : LOCAL.ACAO

-- Portas e válvulas

PORTAINTERNA =  porta.interna.abrir -> porta.interna.fechar -> PORTAINTERNA 

VALVULAINTERNA = valvula.interna.abrir -> valvula.interna.fechar -> VALVULAINTERNA 

PORTAEXTERNA =  porta.externa.abrir -> porta.externa.fechar -> PORTAEXTERNA 

VALVULAEXTERNA =  valvula.externa.abrir -> valvula.externa.fechar -> VALVULAEXTERNA 

PORTAS = PORTAINTERNA [{|porta.interna|}||{|porta.externa|}] PORTAEXTERNA  

VALVULAS = VALVULAINTERNA [{|valvula.interna|}||{|valvula.externa|}] VALVULAEXTERNA 

COMPONENTES = PORTAS [ {|porta|} || {|valvula|} ] VALVULAS 

assert COMPONENTES:[deadlock free]

-- Especificação de segurança

SPEC_SEGURA = TODOS_FECHADOS

TODOS_FECHADOS = 
  valvula.interna.abrir -> IAF
  [] porta.interna.abrir -> IFA
  [] valvula.externa.abrir -> EAF
  [] porta.externa.abrir -> EFA

IAF = valvula.interna.fechar -> TODOS_FECHADOS
      [] porta.interna.abrir -> IAA

IAA = valvula.interna.fechar -> IFA
      [] porta.interna.fechar -> IAF

IFA = valvula.interna.abrir -> IAA
      [] porta.interna.fechar -> TODOS_FECHADOS

EAF = valvula.externa.fechar -> TODOS_FECHADOS
      [] porta.externa.abrir -> EAA

EAA = valvula.externa.fechar -> EFA
      [] porta.externa.fechar -> EAF

EFA = valvula.externa.abrir -> EAA
      [] porta.externa.fechar -> TODOS_FECHADOS

-- Controle que garante que as portas só abrem após as válvulas
-- estiverem abertas

CONTROLE_P_INT = valvula.interna.abrir -> CONTROLE_P_INT_A
               [] valvula.interna.fechar -> CONTROLE_P_INT   
CONTROLE_P_INT_A = valvula.interna.fechar -> CONTROLE_P_INT 
               [] porta.interna.abrir -> CONTROLE_P_INT_A 

CONTROLE_P_OUT = valvula.externa.abrir -> CONTROLE_P_OUT_A 
               [] valvula.externa.fechar -> CONTROLE_P_OUT
CONTROLE_P_OUT_A = valvula.externa.fechar -> CONTROLE_P_OUT 
               [] porta.externa.abrir -> CONTROLE_P_OUT_A 

-- /* item 04 da aula pratica 03

CONTROLE_V_INT = valvula.interna.fechar -> CONTROLE_V_INT_A

CONTROLE_V_INT_A = porta.interna.fechar -> CONTROLE_V_INT

CONTROLE_V_OUT = valvula.externa.fechar -> CONTROLE_V_OUT_A

CONTROLE_V_OUT_A = porta.externa.fechar -> CONTROLE_V_OUT

CONTROLE_V = 
      CONTROLE_V_INT 
            [{|valvula.interna.fechar,porta.interna.fechar|} || {|valvula.externa.fechar,porta.externa.fechar|}]
      CONTROLE_V_OUT

ALPHA_CONT_V = {|valvula.interna.fechar,porta.interna.fechar,valvula.externa.fechar,porta.externa.fechar|}

SISTEMA2 = 
  COMPONENTES 
    [{| porta, valvula |}
      ||
     {|valvula.interna.fechar,porta.interna.fechar,valvula.externa.fechar,porta.externa.fechar|}]
  CONTROLE_V

-- item 04 da aula pratica 03 */

CONTROLE_P = 
   CONTROLE_P_INT
      [{|valvula.interna, porta.interna.abrir|}||{|valvula.externa, porta.externa.abrir|}]
   CONTROLE_P_OUT

ALPHA_CONT_P = {|valvula.interna, porta.interna.abrir,valvula.externa, porta.externa.abrir|}

SISTEMA = 
  COMPONENTES 
    [{| porta, valvula |}
      ||
     {|valvula.interna, porta.interna.abrir, valvula.externa, porta.externa.abrir|}]
  CONTROLE_P

assert SPEC_SEGURA [T= SISTEMA

-- Controle que garante que apenas uma válvula e uma porta está aberta por vez

CONTROLE_VALVULA = valvula.interna.abrir -> valvula.interna.fechar -> CONTROLE_VALVULA 
                [] valvula.externa.abrir -> valvula.externa.fechar -> CONTROLE_VALVULA 

CONTROLE_PORTA = porta.interna.abrir -> porta.interna.fechar -> CONTROLE_PORTA 
          [] porta.externa.abrir -> porta.externa.fechar -> CONTROLE_PORTA 

CONTROLE = CONTROLE_VALVULA 
             [{|valvula.interna, valvula.externa|}||{|porta.interna, porta.externa|}]
          CONTROLE_PORTA

-- Sistema Airlock

AIRLOCK = SISTEMA [| {| porta, valvula |} |] CONTROLE

assert SPEC_SEGURA [T= AIRLOCK

-- Sistema Airlock item 04 

AIRLOCK2 = SISTEMA2 [|{|porta,valvula|}|] CONTROLE

assert SPEC_SEGURA [T= AIRLOCK2
